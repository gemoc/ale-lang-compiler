/*
let list = {
  isEmpty = fun _ -> this.empty,
  getHead = fun _ -> this.head,
  getTail = fun _ -> this.tail,
  
  # constructors
  nil =  fun _ -> this with { empty = true },
  cons = fun x -> fun xs -> this with { empty = false, head = x, tail = xs },

  iterator = (fun _ ->
    { elements = this,
      hasNext = (fun _ -> not this.elements.empty),
      next = (fun _ -> let x = this.elements.head in this.elements := this.elements.tail; x)
    }),

   get = fun n -> if n = 0 then this.head else this.tail.get (n-1),

   map = fun f ->
     if this.empty then
       this.nil {}
     else
       this.cons (f this.head) (this.tail.map f)
} ;;

# Examples of lists

let a = list.cons 1 (list.cons 2 (list.cons 3 (list.nil {}))) ;;

let x = a.get 2 ;;

let b = a.map (fun x -> 100 + x) ;;

 */
File {
	commands {
		Def list {
			expr BObject {
				fields {
					Field isEmpty {
						value Fun _ {
							body Project empty {
								exp This
							}
						}
					},
					Field getHead {
						value Fun _ {
							body Project head {
								exp This
							}
						}
					},
					Field getTail {
						value Fun _ {
							body Project tail {
								exp This
							}
						}
					}, // constructors
					Field nil { // fun _ -> this with { empty = true }
						value Fun _ {
							body With {
								lhs This
								rhs BObject { fields { Field empty { value value Bool } } }
							}
							
						}
					},
					Field cons { // fun x -> fun xs -> this with { empty = false, head = x, tail = xs }
						value Fun x {
							body Fun xs {
								body With {
									lhs This
									rhs BObject {
										fields {
											Field empty { value Bool }, Field head { value Var "x" }, Field tail { value Var "xs" }
										}
									}
								}
								
							}
						}
					},
					/*
					 * fun _ -> { elements = this,
      								hasNext = (fun _ -> not this.elements.empty),
      								next = (fun _ -> let x = this.elements.head in this.elements := this.elements.tail; x)
    							}
					 */
					Field iterator {
						value Fun _ {
							body BObject {
								fields {
									Field elements { value This },
									Field hasNext { value Fun _ { body Not { value Project empty { exp Project elements { exp This } } } } } ,
									Field next {
										value Fun _ { body Seq {
											lhs Let x { 
											lhs Project head { exp Project elements { exp This }}
											rhs Assign elements {
												lhs This 
												rhs Project tail { exp Project elements { exp This } } } }
												rhs Var "x" 
											}
										}
									}
								}
							}
						}
					}, // fun n -> if n = 0 then this.head else this.tail.get (n-1)
					Field get {
						value Fun n {
							body If { 
								cond CmpOpEqual { lhs Int { value 0 } rhs Var "n" } 
								then Project head { exp This } 
								els App {
									lhs Project get { exp Project tail { exp This } } 
									rhs ArithOpMinus {
										lhs Var "n"
										rhs Int { value 1 }
									}
								}
							} 
						}
					},
					/*
					 * map = fun f ->
					     if this.empty then
					       this.nil {}
					     else
					       this.cons (f this.head) (this.tail.map f)
					 */
					 Field map {
					 	value Fun f {
					 		body If {
					 			cond Project empty { exp This } 
					 			then BObject { }
					 			 els App {
					 			 	lhs Project cons { exp This } 
					 			 	rhs App {
					 			 		lhs App {
					 			 			lhs Var "f"
					 			 			rhs Project head { exp This } 
					 			 			} 
					 			 		rhs App {
					 			 			lhs Project map { exp Project tail { exp This } } 
					 			 			rhs Var "f"	
					 			 		}
					 			 	}
					 			 }
					 		}
					 	}
					 },
					 Field decreasingList {
					 	value Fun cptr {
					 		body If { 
					 			cond CmpOpEqual { lhs Var cptr rhs Int { value 0 } }
						 		then App {
									lhs Project nil { exp Var "list" } 
									rhs BObject {}
								}
						 		els App {
									lhs App { 
										lhs Project cons { exp Var "list" } 
										rhs Var "cptr"
									}
									rhs App {
										lhs Project decreasingList { exp This }
										rhs ArithOpMinus { lhs Var "cptr" rhs Int { value 1 } } 
									}
								}
					 		}
						} 
					}
				}
			}
		},
		
//		Def sort {
//			expr BObject {
//				fields {
//					Field insertSort {
//						value Fun l {
//							body App {
//								lhs App {
//									lhs Project insertSort2 {   exp This }
//									rhs Var "l"
//								} rhs App {
//									lhs Project nil { exp Var "list" }
//									rhs BObject {}
//								}
//							}
//						}
//					},
//					Field insertSort2 {
//						value Fun l {
//							body Fun acc {
//								body Int { value 999 }
//							}
//						}
//					}
//				}
//			}
//		},
//		
//		App {
//			lhs Project insertSort { exp Var "sort" }
//			rhs Int { value 42 }
//		},
//		
		App {
			lhs Project isEmpty {
				exp App {
					lhs Project decreasingList {
						exp
						 App {
						lhs Project nil { exp Var "list" }
						rhs BObject {}
						}
					} 
					rhs Int { value 700 }
				}
			}
			rhs BObject {} 
		},
		App {
			lhs Project isEmpty {
				exp App {
					lhs Project decreasingList {
						exp
						 App {
						lhs Project nil { exp Var "list" }
						rhs BObject {}
						}
					} 
					rhs Int { value 700 }
				}
			}
			rhs BObject {} 
		},
		App {
			lhs Project isEmpty {
				exp App {
					lhs Project decreasingList {
						exp
						 App {
						lhs Project nil { exp Var "list" }
						rhs BObject {}
						}
					} 
					rhs Int { value 700 }
				}
			}
			rhs BObject {} 
		},
		App {
			lhs Project isEmpty {
				exp App {
					lhs Project decreasingList {
						exp
						 App {
						lhs Project nil { exp Var "list" }
						rhs BObject {}
						}
					} 
					rhs Int { value 700 }
				}
			}
			rhs BObject {} 
		},
		App {
			lhs Project isEmpty {
				exp App {
					lhs Project decreasingList {
						exp
						 App {
						lhs Project nil { exp Var "list" }
						rhs BObject {}
						}
					} 
					rhs Int { value 700 }
				}
			}
			rhs BObject {} 
		},
		App {
			lhs Project isEmpty {
				exp App {
					lhs Project decreasingList {
						exp
						 App {
						lhs Project nil { exp Var "list" }
						rhs BObject {}
						}
					} 
					rhs Int { value 700 }
				}
			}
			rhs BObject {} 
		},
		App {
			lhs Project isEmpty {
				exp App {
					lhs Project decreasingList {
						exp
						 App {
						lhs Project nil { exp Var "list" }
						rhs BObject {}
						}
					} 
					rhs Int { value 700 }
				}
			}
			rhs BObject {} 
		},
		App {
			lhs Project isEmpty {
				exp App {
					lhs Project decreasingList {
						exp
						 App {
						lhs Project nil { exp Var "list" }
						rhs BObject {}
						}
					} 
					rhs Int { value 700 }
				}
			}
			rhs BObject {} 
		},
		App {
			lhs Project isEmpty {
				exp App {
					lhs Project decreasingList {
						exp
						 App {
						lhs Project nil { exp Var "list" }
						rhs BObject {}
						}
					} 
					rhs Int { value 700 }
				}
			}
			rhs BObject {} 
		}
//		,
//			App {
//				lhs Project decreasingList {
//					exp
//					 App {
//					lhs Project nil { exp Var "list" }
//					rhs BObject {}
//					}
//				} 
//				rhs Int { value 1 }
//			}
//		,
//		App {
//			lhs Project decreasingList {
//				exp
//				 App {
//				lhs Project nil { exp Var "list" }
//				rhs BObject {}
//				}
//			} 
//			rhs Int { value 10 }
//		}
//		
	}
}