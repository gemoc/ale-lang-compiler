// automatically generated by Xtext
grammar boa.xtext.Boa with org.eclipse.xtext.common.Terminals

import "platform:/resource/boa.model/model/boa.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

File returns File:
	{File}
	'File'
	'{'
		('commands' '{' commands+=TopLevelCmd ( "," commands+=TopLevelCmd)* '}' )?
	'}';

TopLevelCmd returns TopLevelCmd:
	Def | App | Var | This | Bool | Int0 | Skip | Project | BObject | Copy | With | Not | If | Let | Fun | Assign | ArithOpPlus | ArithOpMinus | ArithOpTimes | ArithOpDivide | ArithOpRemainder | BoolOpAnd | BoolOpOr | Seq | CmpOpEqual | CmpOpUnequal | CmpOpLess;

Expr returns Expr:
	App | Var | This | Bool | Int0 | Skip | Project | BObject | Copy | With | Not | If | Let | Fun | Assign | ArithOpPlus | ArithOpMinus | ArithOpTimes | ArithOpDivide | ArithOpRemainder | BoolOpAnd | BoolOpOr | Seq | CmpOpEqual | CmpOpUnequal | CmpOpLess;


Def returns Def:
	'Def'
	name=EString
	'{'
		'expr' expr=Expr
	'}';

App returns App:
	'App'
	'{'
		'lhs' lhs=Expr
		'rhs' rhs=Expr
	'}';

Var returns Var:
	{Var}
	'Var'
	name=EString;

This returns This:
	{This}
	'This'
	;

Bool returns Bool:
	{Bool}
	(value?='value')?
	'Bool'
	;

Int0 returns Int:
	{Int}
	'Int'
	'{'
		('value' value=EInt)?
	'}';

Skip returns Skip:
	{Skip}
	'Skip'
	;

Project returns Project:
	'Project'
	name=EString
	'{'
		'exp' exp=Expr
	'}';

BObject returns BObject:
	{BObject}
	'BObject'
	'{'
		('fields' '{' fields+=Field ( "," fields+=Field)* '}' )?
	'}';

Copy returns Copy:
	'Copy'
	'{'
		'copy' copy=Expr
	'}';

With returns With:
	'With'
	'{'
		'lhs' lhs=Expr
		'rhs' rhs=Expr
	'}';

Not returns Not:
	'Not'
	'{'
		'value' value=Expr
	'}';

If returns If:
	'If'
	'{'
		'cond' cond=Expr
		'then' thn=Expr
		'els' els=Expr
	'}';

Let returns Let:
	'Let'
	name=EString
	'{'
		'lhs' lhs=Expr
		'rhs' rhs=Expr
	'}';

Fun returns Fun:
	'Fun'
	name=EString
	'{'
		'body' body=Expr
	'}';

Assign returns Assign:
	'Assign'
	name=EString
	'{'
		'lhs' lhs=Expr
		'rhs' rhs=Expr
	'}';

ArithOpPlus returns ArithOpPlus:
	'ArithOpPlus'
	'{'
		'lhs' lhs=Expr
		'rhs' rhs=Expr
	'}';

ArithOpMinus returns ArithOpMinus:
	'ArithOpMinus'
	'{'
		'lhs' lhs=Expr
		'rhs' rhs=Expr
	'}';

ArithOpTimes returns ArithOpTimes:
	'ArithOpTimes'
	'{'
		'lhs' lhs=Expr
		'rhs' rhs=Expr
	'}';

ArithOpDivide returns ArithOpDivide:
	'ArithOpDivide'
	'{'
		'lhs' lhs=Expr
		'rhs' rhs=Expr
	'}';

ArithOpRemainder returns ArithOpRemainder:
	'ArithOpRemainder'
	'{'
		'lhs' lhs=Expr
		'rhs' rhs=Expr
	'}';

BoolOpAnd returns BoolOpAnd:
	'BoolOpAnd'
	'{'
		'lhs' lhs=Expr
		'rhs' rhs=Expr
	'}';

BoolOpOr returns BoolOpOr:
	'BoolOpOr'
	'{'
		'lhs' lhs=Expr
		'rhs' rhs=Expr
	'}';

Seq returns Seq:
	'Seq'
	'{'
		'lhs' lhs=Expr
		'rhs' rhs=Expr
	'}';

CmpOpEqual returns CmpOpEqual:
	'CmpOpEqual'
	'{'
		'lhs' lhs=Expr
		'rhs' rhs=Expr
	'}';

CmpOpUnequal returns CmpOpUnequal:
	'CmpOpUnequal'
	'{'
		'lhs' lhs=Expr
		'rhs' rhs=Expr
	'}';

CmpOpLess returns CmpOpLess:
	'CmpOpLess'
	'{'
		'lhs' lhs=Expr
		'rhs' rhs=Expr
	'}';

EString returns ecore::EString:
	STRING | ID;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EInt returns ecore::EInt:
	'-'? INT;

Field returns Field:
	'Field'
	name=EString
	'{'
		'value' value=Expr
	'}';
