/*
 * generated by Xtext 2.14.0
 */
package boa.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BoaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommandsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cCommandsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cCommandsTopLevelCmdParserRuleCall_3_2_0 = (RuleCall)cCommandsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cCommandsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cCommandsTopLevelCmdParserRuleCall_3_3_1_0 = (RuleCall)cCommandsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//File:
		//	{File}
		//	'File'
		//	'{' ('commands' '{' commands+=TopLevelCmd ("," commands+=TopLevelCmd)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{File} 'File' '{' ('commands' '{' commands+=TopLevelCmd ("," commands+=TopLevelCmd)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{File}
		public Action getFileAction_0() { return cFileAction_0; }
		
		//'File'
		public Keyword getFileKeyword_1() { return cFileKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('commands' '{' commands+=TopLevelCmd ("," commands+=TopLevelCmd)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'commands'
		public Keyword getCommandsKeyword_3_0() { return cCommandsKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//commands+=TopLevelCmd
		public Assignment getCommandsAssignment_3_2() { return cCommandsAssignment_3_2; }
		
		//TopLevelCmd
		public RuleCall getCommandsTopLevelCmdParserRuleCall_3_2_0() { return cCommandsTopLevelCmdParserRuleCall_3_2_0; }
		
		//("," commands+=TopLevelCmd)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//commands+=TopLevelCmd
		public Assignment getCommandsAssignment_3_3_1() { return cCommandsAssignment_3_3_1; }
		
		//TopLevelCmd
		public RuleCall getCommandsTopLevelCmdParserRuleCall_3_3_1_0() { return cCommandsTopLevelCmdParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TopLevelCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.TopLevelCmd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAppParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cThisParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBoolParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cInt0ParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSkipParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cProjectParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBObjectParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCopyParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cWithParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cNotParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cIfParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cLetParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cFunParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cAssignParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cArithOpPlusParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cArithOpMinusParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cArithOpTimesParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cArithOpDivideParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cArithOpRemainderParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cBoolOpAndParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cBoolOpOrParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cSeqParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cCmpOpEqualParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cCmpOpUnequalParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cCmpOpLessParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		
		//TopLevelCmd:
		//	Def | App | Var | This | Bool | Int0 | Skip | Project | BObject | Copy | With | Not | If | Let | Fun | Assign |
		//	ArithOpPlus | ArithOpMinus | ArithOpTimes | ArithOpDivide | ArithOpRemainder | BoolOpAnd | BoolOpOr | Seq | CmpOpEqual
		//	| CmpOpUnequal | CmpOpLess;
		@Override public ParserRule getRule() { return rule; }
		
		//Def | App | Var | This | Bool | Int0 | Skip | Project | BObject | Copy | With | Not | If | Let | Fun | Assign |
		//ArithOpPlus | ArithOpMinus | ArithOpTimes | ArithOpDivide | ArithOpRemainder | BoolOpAnd | BoolOpOr | Seq | CmpOpEqual
		//| CmpOpUnequal | CmpOpLess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Def
		public RuleCall getDefParserRuleCall_0() { return cDefParserRuleCall_0; }
		
		//App
		public RuleCall getAppParserRuleCall_1() { return cAppParserRuleCall_1; }
		
		//Var
		public RuleCall getVarParserRuleCall_2() { return cVarParserRuleCall_2; }
		
		//This
		public RuleCall getThisParserRuleCall_3() { return cThisParserRuleCall_3; }
		
		//Bool
		public RuleCall getBoolParserRuleCall_4() { return cBoolParserRuleCall_4; }
		
		//Int0
		public RuleCall getInt0ParserRuleCall_5() { return cInt0ParserRuleCall_5; }
		
		//Skip
		public RuleCall getSkipParserRuleCall_6() { return cSkipParserRuleCall_6; }
		
		//Project
		public RuleCall getProjectParserRuleCall_7() { return cProjectParserRuleCall_7; }
		
		//BObject
		public RuleCall getBObjectParserRuleCall_8() { return cBObjectParserRuleCall_8; }
		
		//Copy
		public RuleCall getCopyParserRuleCall_9() { return cCopyParserRuleCall_9; }
		
		//With
		public RuleCall getWithParserRuleCall_10() { return cWithParserRuleCall_10; }
		
		//Not
		public RuleCall getNotParserRuleCall_11() { return cNotParserRuleCall_11; }
		
		//If
		public RuleCall getIfParserRuleCall_12() { return cIfParserRuleCall_12; }
		
		//Let
		public RuleCall getLetParserRuleCall_13() { return cLetParserRuleCall_13; }
		
		//Fun
		public RuleCall getFunParserRuleCall_14() { return cFunParserRuleCall_14; }
		
		//Assign
		public RuleCall getAssignParserRuleCall_15() { return cAssignParserRuleCall_15; }
		
		//ArithOpPlus
		public RuleCall getArithOpPlusParserRuleCall_16() { return cArithOpPlusParserRuleCall_16; }
		
		//ArithOpMinus
		public RuleCall getArithOpMinusParserRuleCall_17() { return cArithOpMinusParserRuleCall_17; }
		
		//ArithOpTimes
		public RuleCall getArithOpTimesParserRuleCall_18() { return cArithOpTimesParserRuleCall_18; }
		
		//ArithOpDivide
		public RuleCall getArithOpDivideParserRuleCall_19() { return cArithOpDivideParserRuleCall_19; }
		
		//ArithOpRemainder
		public RuleCall getArithOpRemainderParserRuleCall_20() { return cArithOpRemainderParserRuleCall_20; }
		
		//BoolOpAnd
		public RuleCall getBoolOpAndParserRuleCall_21() { return cBoolOpAndParserRuleCall_21; }
		
		//BoolOpOr
		public RuleCall getBoolOpOrParserRuleCall_22() { return cBoolOpOrParserRuleCall_22; }
		
		//Seq
		public RuleCall getSeqParserRuleCall_23() { return cSeqParserRuleCall_23; }
		
		//CmpOpEqual
		public RuleCall getCmpOpEqualParserRuleCall_24() { return cCmpOpEqualParserRuleCall_24; }
		
		//CmpOpUnequal
		public RuleCall getCmpOpUnequalParserRuleCall_25() { return cCmpOpUnequalParserRuleCall_25; }
		
		//CmpOpLess
		public RuleCall getCmpOpLessParserRuleCall_26() { return cCmpOpLessParserRuleCall_26; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAppParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cThisParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBoolParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInt0ParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSkipParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cProjectParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBObjectParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cCopyParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cWithParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cNotParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cIfParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLetParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cFunParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cAssignParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cArithOpPlusParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cArithOpMinusParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cArithOpTimesParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cArithOpDivideParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cArithOpRemainderParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cBoolOpAndParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cBoolOpOrParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cSeqParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cCmpOpEqualParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cCmpOpUnequalParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cCmpOpLessParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		
		//Expr:
		//	App | Var | This | Bool | Int0 | Skip | Project | BObject | Copy | With | Not | If | Let | Fun | Assign | ArithOpPlus
		//	| ArithOpMinus | ArithOpTimes | ArithOpDivide | ArithOpRemainder | BoolOpAnd | BoolOpOr | Seq | CmpOpEqual |
		//	CmpOpUnequal | CmpOpLess;
		@Override public ParserRule getRule() { return rule; }
		
		//App | Var | This | Bool | Int0 | Skip | Project | BObject | Copy | With | Not | If | Let | Fun | Assign | ArithOpPlus |
		//ArithOpMinus | ArithOpTimes | ArithOpDivide | ArithOpRemainder | BoolOpAnd | BoolOpOr | Seq | CmpOpEqual | CmpOpUnequal
		//| CmpOpLess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//App
		public RuleCall getAppParserRuleCall_0() { return cAppParserRuleCall_0; }
		
		//Var
		public RuleCall getVarParserRuleCall_1() { return cVarParserRuleCall_1; }
		
		//This
		public RuleCall getThisParserRuleCall_2() { return cThisParserRuleCall_2; }
		
		//Bool
		public RuleCall getBoolParserRuleCall_3() { return cBoolParserRuleCall_3; }
		
		//Int0
		public RuleCall getInt0ParserRuleCall_4() { return cInt0ParserRuleCall_4; }
		
		//Skip
		public RuleCall getSkipParserRuleCall_5() { return cSkipParserRuleCall_5; }
		
		//Project
		public RuleCall getProjectParserRuleCall_6() { return cProjectParserRuleCall_6; }
		
		//BObject
		public RuleCall getBObjectParserRuleCall_7() { return cBObjectParserRuleCall_7; }
		
		//Copy
		public RuleCall getCopyParserRuleCall_8() { return cCopyParserRuleCall_8; }
		
		//With
		public RuleCall getWithParserRuleCall_9() { return cWithParserRuleCall_9; }
		
		//Not
		public RuleCall getNotParserRuleCall_10() { return cNotParserRuleCall_10; }
		
		//If
		public RuleCall getIfParserRuleCall_11() { return cIfParserRuleCall_11; }
		
		//Let
		public RuleCall getLetParserRuleCall_12() { return cLetParserRuleCall_12; }
		
		//Fun
		public RuleCall getFunParserRuleCall_13() { return cFunParserRuleCall_13; }
		
		//Assign
		public RuleCall getAssignParserRuleCall_14() { return cAssignParserRuleCall_14; }
		
		//ArithOpPlus
		public RuleCall getArithOpPlusParserRuleCall_15() { return cArithOpPlusParserRuleCall_15; }
		
		//ArithOpMinus
		public RuleCall getArithOpMinusParserRuleCall_16() { return cArithOpMinusParserRuleCall_16; }
		
		//ArithOpTimes
		public RuleCall getArithOpTimesParserRuleCall_17() { return cArithOpTimesParserRuleCall_17; }
		
		//ArithOpDivide
		public RuleCall getArithOpDivideParserRuleCall_18() { return cArithOpDivideParserRuleCall_18; }
		
		//ArithOpRemainder
		public RuleCall getArithOpRemainderParserRuleCall_19() { return cArithOpRemainderParserRuleCall_19; }
		
		//BoolOpAnd
		public RuleCall getBoolOpAndParserRuleCall_20() { return cBoolOpAndParserRuleCall_20; }
		
		//BoolOpOr
		public RuleCall getBoolOpOrParserRuleCall_21() { return cBoolOpOrParserRuleCall_21; }
		
		//Seq
		public RuleCall getSeqParserRuleCall_22() { return cSeqParserRuleCall_22; }
		
		//CmpOpEqual
		public RuleCall getCmpOpEqualParserRuleCall_23() { return cCmpOpEqualParserRuleCall_23; }
		
		//CmpOpUnequal
		public RuleCall getCmpOpUnequalParserRuleCall_24() { return cCmpOpUnequalParserRuleCall_24; }
		
		//CmpOpLess
		public RuleCall getCmpOpLessParserRuleCall_25() { return cCmpOpLessParserRuleCall_25; }
	}
	public class DefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Def");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cExprKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Def:
		//	'Def'
		//	name=EString
		//	'{'
		//	'expr' expr=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Def' name=EString '{' 'expr' expr=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'Def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'expr'
		public Keyword getExprKeyword_3() { return cExprKeyword_3; }
		
		//expr=Expr
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_4_0() { return cExprExprParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AppElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.App");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExprParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExprParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//App:
		//	'App'
		//	'{'
		//	'lhs' lhs=Expr
		//	'rhs' rhs=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'App' '{' 'lhs' lhs=Expr 'rhs' rhs=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'App'
		public Keyword getAppKeyword_0() { return cAppKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'lhs'
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }
		
		//lhs=Expr
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }
		
		//Expr
		public RuleCall getLhsExprParserRuleCall_3_0() { return cLhsExprParserRuleCall_3_0; }
		
		//'rhs'
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }
		
		//rhs=Expr
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }
		
		//Expr
		public RuleCall getRhsExprParserRuleCall_5_0() { return cRhsExprParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Var:
		//	{Var}
		//	'Var'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Var} 'Var' name=EString
		public Group getGroup() { return cGroup; }
		
		//{Var}
		public Action getVarAction_0() { return cVarAction_0; }
		
		//'Var'
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class ThisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.This");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThisAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//This:
		//	{This}
		//	'This';
		@Override public ParserRule getRule() { return rule; }
		
		//{This} 'This'
		public Group getGroup() { return cGroup; }
		
		//{This}
		public Action getThisAction_0() { return cThisAction_0; }
		
		//'This'
		public Keyword getThisKeyword_1() { return cThisKeyword_1; }
	}
	public class BoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Bool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cValueValueKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		private final Keyword cBoolKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Bool:
		//	{Bool} value?='value'?
		//	'Bool';
		@Override public ParserRule getRule() { return rule; }
		
		//{Bool} value?='value'? 'Bool'
		public Group getGroup() { return cGroup; }
		
		//{Bool}
		public Action getBoolAction_0() { return cBoolAction_0; }
		
		//value?='value'?
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//'value'
		public Keyword getValueValueKeyword_1_0() { return cValueValueKeyword_1_0; }
		
		//'Bool'
		public Keyword getBoolKeyword_2() { return cBoolKeyword_2; }
	}
	public class Int0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Int0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Int0 Int:
		//	{Int}
		//	'Int'
		//	'{' ('value' value=EInt)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Int} 'Int' '{' ('value' value=EInt)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Int}
		public Action getIntAction_0() { return cIntAction_0; }
		
		//'Int'
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('value' value=EInt)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'value'
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }
		
		//value=EInt
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_3_1_0() { return cValueEIntParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SkipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Skip");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSkipAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSkipKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Skip:
		//	{Skip}
		//	'Skip';
		@Override public ParserRule getRule() { return rule; }
		
		//{Skip} 'Skip'
		public Group getGroup() { return cGroup; }
		
		//{Skip}
		public Action getSkipAction_0() { return cSkipAction_0; }
		
		//'Skip'
		public Keyword getSkipKeyword_1() { return cSkipKeyword_1; }
	}
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cExpKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpExprParserRuleCall_4_0 = (RuleCall)cExpAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Project:
		//	'Project'
		//	name=EString
		//	'{'
		//	'exp' exp=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Project' name=EString '{' 'exp' exp=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'Project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'exp'
		public Keyword getExpKeyword_3() { return cExpKeyword_3; }
		
		//exp=Expr
		public Assignment getExpAssignment_4() { return cExpAssignment_4; }
		
		//Expr
		public RuleCall getExpExprParserRuleCall_4_0() { return cExpExprParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.BObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBObjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFieldsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cFieldsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cFieldsFieldParserRuleCall_3_2_0 = (RuleCall)cFieldsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cFieldsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cFieldsFieldParserRuleCall_3_3_1_0 = (RuleCall)cFieldsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BObject:
		//	{BObject}
		//	'BObject'
		//	'{' ('fields' '{' fields+=Field ("," fields+=Field)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BObject} 'BObject' '{' ('fields' '{' fields+=Field ("," fields+=Field)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{BObject}
		public Action getBObjectAction_0() { return cBObjectAction_0; }
		
		//'BObject'
		public Keyword getBObjectKeyword_1() { return cBObjectKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('fields' '{' fields+=Field ("," fields+=Field)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'fields'
		public Keyword getFieldsKeyword_3_0() { return cFieldsKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_3_2() { return cFieldsAssignment_3_2; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_3_2_0() { return cFieldsFieldParserRuleCall_3_2_0; }
		
		//("," fields+=Field)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_3_3_1() { return cFieldsAssignment_3_3_1; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_3_3_1_0() { return cFieldsFieldParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CopyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Copy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCopyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCopyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCopyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCopyExprParserRuleCall_3_0 = (RuleCall)cCopyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Copy:
		//	'Copy'
		//	'{'
		//	'copy' copy=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Copy' '{' 'copy' copy=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'Copy'
		public Keyword getCopyKeyword_0() { return cCopyKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'copy'
		public Keyword getCopyKeyword_2() { return cCopyKeyword_2; }
		
		//copy=Expr
		public Assignment getCopyAssignment_3() { return cCopyAssignment_3; }
		
		//Expr
		public RuleCall getCopyExprParserRuleCall_3_0() { return cCopyExprParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class WithElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.With");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExprParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExprParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//With:
		//	'With'
		//	'{'
		//	'lhs' lhs=Expr
		//	'rhs' rhs=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'With' '{' 'lhs' lhs=Expr 'rhs' rhs=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'With'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'lhs'
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }
		
		//lhs=Expr
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }
		
		//Expr
		public RuleCall getLhsExprParserRuleCall_3_0() { return cLhsExprParserRuleCall_3_0; }
		
		//'rhs'
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }
		
		//rhs=Expr
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }
		
		//Expr
		public RuleCall getRhsExprParserRuleCall_5_0() { return cRhsExprParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExprParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Not:
		//	'Not'
		//	'{'
		//	'value' value=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Not' '{' 'value' value=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'Not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'value'
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }
		
		//value=Expr
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Expr
		public RuleCall getValueExprParserRuleCall_3_0() { return cValueExprParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCondKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondExprParserRuleCall_3_0 = (RuleCall)cCondAssignment_3.eContents().get(0);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThnAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThnExprParserRuleCall_5_0 = (RuleCall)cThnAssignment_5.eContents().get(0);
		private final Keyword cElsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElsExprParserRuleCall_7_0 = (RuleCall)cElsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//If:
		//	'If'
		//	'{'
		//	'cond' cond=Expr
		//	'then' thn=Expr
		//	'els' els=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'If' '{' 'cond' cond=Expr 'then' thn=Expr 'els' els=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'If'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'cond'
		public Keyword getCondKeyword_2() { return cCondKeyword_2; }
		
		//cond=Expr
		public Assignment getCondAssignment_3() { return cCondAssignment_3; }
		
		//Expr
		public RuleCall getCondExprParserRuleCall_3_0() { return cCondExprParserRuleCall_3_0; }
		
		//'then'
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }
		
		//thn=Expr
		public Assignment getThnAssignment_5() { return cThnAssignment_5; }
		
		//Expr
		public RuleCall getThnExprParserRuleCall_5_0() { return cThnExprParserRuleCall_5_0; }
		
		//'els'
		public Keyword getElsKeyword_6() { return cElsKeyword_6; }
		
		//els=Expr
		public Assignment getElsAssignment_7() { return cElsAssignment_7; }
		
		//Expr
		public RuleCall getElsExprParserRuleCall_7_0() { return cElsExprParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class LetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Let");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLhsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLhsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLhsExprParserRuleCall_4_0 = (RuleCall)cLhsAssignment_4.eContents().get(0);
		private final Keyword cRhsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRhsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRhsExprParserRuleCall_6_0 = (RuleCall)cRhsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Let:
		//	'Let'
		//	name=EString
		//	'{'
		//	'lhs' lhs=Expr
		//	'rhs' rhs=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Let' name=EString '{' 'lhs' lhs=Expr 'rhs' rhs=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'Let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'lhs'
		public Keyword getLhsKeyword_3() { return cLhsKeyword_3; }
		
		//lhs=Expr
		public Assignment getLhsAssignment_4() { return cLhsAssignment_4; }
		
		//Expr
		public RuleCall getLhsExprParserRuleCall_4_0() { return cLhsExprParserRuleCall_4_0; }
		
		//'rhs'
		public Keyword getRhsKeyword_5() { return cRhsKeyword_5; }
		
		//rhs=Expr
		public Assignment getRhsAssignment_6() { return cRhsAssignment_6; }
		
		//Expr
		public RuleCall getRhsExprParserRuleCall_6_0() { return cRhsExprParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class FunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Fun");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBodyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyExprParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Fun:
		//	'Fun'
		//	name=EString
		//	'{'
		//	'body' body=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Fun' name=EString '{' 'body' body=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'Fun'
		public Keyword getFunKeyword_0() { return cFunKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'body'
		public Keyword getBodyKeyword_3() { return cBodyKeyword_3; }
		
		//body=Expr
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Expr
		public RuleCall getBodyExprParserRuleCall_4_0() { return cBodyExprParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLhsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLhsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLhsExprParserRuleCall_4_0 = (RuleCall)cLhsAssignment_4.eContents().get(0);
		private final Keyword cRhsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRhsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRhsExprParserRuleCall_6_0 = (RuleCall)cRhsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Assign:
		//	'Assign'
		//	name=EString
		//	'{'
		//	'lhs' lhs=Expr
		//	'rhs' rhs=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Assign' name=EString '{' 'lhs' lhs=Expr 'rhs' rhs=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'Assign'
		public Keyword getAssignKeyword_0() { return cAssignKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'lhs'
		public Keyword getLhsKeyword_3() { return cLhsKeyword_3; }
		
		//lhs=Expr
		public Assignment getLhsAssignment_4() { return cLhsAssignment_4; }
		
		//Expr
		public RuleCall getLhsExprParserRuleCall_4_0() { return cLhsExprParserRuleCall_4_0; }
		
		//'rhs'
		public Keyword getRhsKeyword_5() { return cRhsKeyword_5; }
		
		//rhs=Expr
		public Assignment getRhsAssignment_6() { return cRhsAssignment_6; }
		
		//Expr
		public RuleCall getRhsExprParserRuleCall_6_0() { return cRhsExprParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ArithOpPlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.ArithOpPlus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArithOpPlusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExprParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExprParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ArithOpPlus:
		//	'ArithOpPlus'
		//	'{'
		//	'lhs' lhs=Expr
		//	'rhs' rhs=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ArithOpPlus' '{' 'lhs' lhs=Expr 'rhs' rhs=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'ArithOpPlus'
		public Keyword getArithOpPlusKeyword_0() { return cArithOpPlusKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'lhs'
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }
		
		//lhs=Expr
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }
		
		//Expr
		public RuleCall getLhsExprParserRuleCall_3_0() { return cLhsExprParserRuleCall_3_0; }
		
		//'rhs'
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }
		
		//rhs=Expr
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }
		
		//Expr
		public RuleCall getRhsExprParserRuleCall_5_0() { return cRhsExprParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ArithOpMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.ArithOpMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArithOpMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExprParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExprParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ArithOpMinus:
		//	'ArithOpMinus'
		//	'{'
		//	'lhs' lhs=Expr
		//	'rhs' rhs=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ArithOpMinus' '{' 'lhs' lhs=Expr 'rhs' rhs=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'ArithOpMinus'
		public Keyword getArithOpMinusKeyword_0() { return cArithOpMinusKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'lhs'
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }
		
		//lhs=Expr
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }
		
		//Expr
		public RuleCall getLhsExprParserRuleCall_3_0() { return cLhsExprParserRuleCall_3_0; }
		
		//'rhs'
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }
		
		//rhs=Expr
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }
		
		//Expr
		public RuleCall getRhsExprParserRuleCall_5_0() { return cRhsExprParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ArithOpTimesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.ArithOpTimes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArithOpTimesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExprParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExprParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ArithOpTimes:
		//	'ArithOpTimes'
		//	'{'
		//	'lhs' lhs=Expr
		//	'rhs' rhs=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ArithOpTimes' '{' 'lhs' lhs=Expr 'rhs' rhs=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'ArithOpTimes'
		public Keyword getArithOpTimesKeyword_0() { return cArithOpTimesKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'lhs'
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }
		
		//lhs=Expr
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }
		
		//Expr
		public RuleCall getLhsExprParserRuleCall_3_0() { return cLhsExprParserRuleCall_3_0; }
		
		//'rhs'
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }
		
		//rhs=Expr
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }
		
		//Expr
		public RuleCall getRhsExprParserRuleCall_5_0() { return cRhsExprParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ArithOpDivideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.ArithOpDivide");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArithOpDivideKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExprParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExprParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ArithOpDivide:
		//	'ArithOpDivide'
		//	'{'
		//	'lhs' lhs=Expr
		//	'rhs' rhs=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ArithOpDivide' '{' 'lhs' lhs=Expr 'rhs' rhs=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'ArithOpDivide'
		public Keyword getArithOpDivideKeyword_0() { return cArithOpDivideKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'lhs'
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }
		
		//lhs=Expr
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }
		
		//Expr
		public RuleCall getLhsExprParserRuleCall_3_0() { return cLhsExprParserRuleCall_3_0; }
		
		//'rhs'
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }
		
		//rhs=Expr
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }
		
		//Expr
		public RuleCall getRhsExprParserRuleCall_5_0() { return cRhsExprParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ArithOpRemainderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.ArithOpRemainder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArithOpRemainderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExprParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExprParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ArithOpRemainder:
		//	'ArithOpRemainder'
		//	'{'
		//	'lhs' lhs=Expr
		//	'rhs' rhs=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ArithOpRemainder' '{' 'lhs' lhs=Expr 'rhs' rhs=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'ArithOpRemainder'
		public Keyword getArithOpRemainderKeyword_0() { return cArithOpRemainderKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'lhs'
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }
		
		//lhs=Expr
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }
		
		//Expr
		public RuleCall getLhsExprParserRuleCall_3_0() { return cLhsExprParserRuleCall_3_0; }
		
		//'rhs'
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }
		
		//rhs=Expr
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }
		
		//Expr
		public RuleCall getRhsExprParserRuleCall_5_0() { return cRhsExprParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class BoolOpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.BoolOpAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoolOpAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExprParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExprParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BoolOpAnd:
		//	'BoolOpAnd'
		//	'{'
		//	'lhs' lhs=Expr
		//	'rhs' rhs=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BoolOpAnd' '{' 'lhs' lhs=Expr 'rhs' rhs=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'BoolOpAnd'
		public Keyword getBoolOpAndKeyword_0() { return cBoolOpAndKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'lhs'
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }
		
		//lhs=Expr
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }
		
		//Expr
		public RuleCall getLhsExprParserRuleCall_3_0() { return cLhsExprParserRuleCall_3_0; }
		
		//'rhs'
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }
		
		//rhs=Expr
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }
		
		//Expr
		public RuleCall getRhsExprParserRuleCall_5_0() { return cRhsExprParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class BoolOpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.BoolOpOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoolOpOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExprParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExprParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BoolOpOr:
		//	'BoolOpOr'
		//	'{'
		//	'lhs' lhs=Expr
		//	'rhs' rhs=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BoolOpOr' '{' 'lhs' lhs=Expr 'rhs' rhs=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'BoolOpOr'
		public Keyword getBoolOpOrKeyword_0() { return cBoolOpOrKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'lhs'
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }
		
		//lhs=Expr
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }
		
		//Expr
		public RuleCall getLhsExprParserRuleCall_3_0() { return cLhsExprParserRuleCall_3_0; }
		
		//'rhs'
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }
		
		//rhs=Expr
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }
		
		//Expr
		public RuleCall getRhsExprParserRuleCall_5_0() { return cRhsExprParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Seq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExprParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExprParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Seq:
		//	'Seq'
		//	'{'
		//	'lhs' lhs=Expr
		//	'rhs' rhs=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Seq' '{' 'lhs' lhs=Expr 'rhs' rhs=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'Seq'
		public Keyword getSeqKeyword_0() { return cSeqKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'lhs'
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }
		
		//lhs=Expr
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }
		
		//Expr
		public RuleCall getLhsExprParserRuleCall_3_0() { return cLhsExprParserRuleCall_3_0; }
		
		//'rhs'
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }
		
		//rhs=Expr
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }
		
		//Expr
		public RuleCall getRhsExprParserRuleCall_5_0() { return cRhsExprParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class CmpOpEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.CmpOpEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCmpOpEqualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExprParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExprParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CmpOpEqual:
		//	'CmpOpEqual'
		//	'{'
		//	'lhs' lhs=Expr
		//	'rhs' rhs=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CmpOpEqual' '{' 'lhs' lhs=Expr 'rhs' rhs=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'CmpOpEqual'
		public Keyword getCmpOpEqualKeyword_0() { return cCmpOpEqualKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'lhs'
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }
		
		//lhs=Expr
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }
		
		//Expr
		public RuleCall getLhsExprParserRuleCall_3_0() { return cLhsExprParserRuleCall_3_0; }
		
		//'rhs'
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }
		
		//rhs=Expr
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }
		
		//Expr
		public RuleCall getRhsExprParserRuleCall_5_0() { return cRhsExprParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class CmpOpUnequalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.CmpOpUnequal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCmpOpUnequalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExprParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExprParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CmpOpUnequal:
		//	'CmpOpUnequal'
		//	'{'
		//	'lhs' lhs=Expr
		//	'rhs' rhs=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CmpOpUnequal' '{' 'lhs' lhs=Expr 'rhs' rhs=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'CmpOpUnequal'
		public Keyword getCmpOpUnequalKeyword_0() { return cCmpOpUnequalKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'lhs'
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }
		
		//lhs=Expr
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }
		
		//Expr
		public RuleCall getLhsExprParserRuleCall_3_0() { return cLhsExprParserRuleCall_3_0; }
		
		//'rhs'
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }
		
		//rhs=Expr
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }
		
		//Expr
		public RuleCall getRhsExprParserRuleCall_5_0() { return cRhsExprParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class CmpOpLessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.CmpOpLess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCmpOpLessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLhsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLhsExprParserRuleCall_3_0 = (RuleCall)cLhsAssignment_3.eContents().get(0);
		private final Keyword cRhsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRhsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRhsExprParserRuleCall_5_0 = (RuleCall)cRhsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CmpOpLess:
		//	'CmpOpLess'
		//	'{'
		//	'lhs' lhs=Expr
		//	'rhs' rhs=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CmpOpLess' '{' 'lhs' lhs=Expr 'rhs' rhs=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'CmpOpLess'
		public Keyword getCmpOpLessKeyword_0() { return cCmpOpLessKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'lhs'
		public Keyword getLhsKeyword_2() { return cLhsKeyword_2; }
		
		//lhs=Expr
		public Assignment getLhsAssignment_3() { return cLhsAssignment_3; }
		
		//Expr
		public RuleCall getLhsExprParserRuleCall_3_0() { return cLhsExprParserRuleCall_3_0; }
		
		//'rhs'
		public Keyword getRhsKeyword_4() { return cRhsKeyword_4; }
		
		//rhs=Expr
		public Assignment getRhsAssignment_5() { return cRhsAssignment_5; }
		
		//Expr
		public RuleCall getRhsExprParserRuleCall_5_0() { return cRhsExprParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boa.xtext.Boa.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cValueKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExprParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Field:
		//	'Field'
		//	name=EString
		//	'{'
		//	'value' value=Expr
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Field' name=EString '{' 'value' value=Expr '}'
		public Group getGroup() { return cGroup; }
		
		//'Field'
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'value'
		public Keyword getValueKeyword_3() { return cValueKeyword_3; }
		
		//value=Expr
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//Expr
		public RuleCall getValueExprParserRuleCall_4_0() { return cValueExprParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	
	
	private final FileElements pFile;
	private final TopLevelCmdElements pTopLevelCmd;
	private final ExprElements pExpr;
	private final DefElements pDef;
	private final AppElements pApp;
	private final VarElements pVar;
	private final ThisElements pThis;
	private final BoolElements pBool;
	private final Int0Elements pInt0;
	private final SkipElements pSkip;
	private final ProjectElements pProject;
	private final BObjectElements pBObject;
	private final CopyElements pCopy;
	private final WithElements pWith;
	private final NotElements pNot;
	private final IfElements pIf;
	private final LetElements pLet;
	private final FunElements pFun;
	private final AssignElements pAssign;
	private final ArithOpPlusElements pArithOpPlus;
	private final ArithOpMinusElements pArithOpMinus;
	private final ArithOpTimesElements pArithOpTimes;
	private final ArithOpDivideElements pArithOpDivide;
	private final ArithOpRemainderElements pArithOpRemainder;
	private final BoolOpAndElements pBoolOpAnd;
	private final BoolOpOrElements pBoolOpOr;
	private final SeqElements pSeq;
	private final CmpOpEqualElements pCmpOpEqual;
	private final CmpOpUnequalElements pCmpOpUnequal;
	private final CmpOpLessElements pCmpOpLess;
	private final EStringElements pEString;
	private final EBooleanElements pEBoolean;
	private final EIntElements pEInt;
	private final FieldElements pField;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BoaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFile = new FileElements();
		this.pTopLevelCmd = new TopLevelCmdElements();
		this.pExpr = new ExprElements();
		this.pDef = new DefElements();
		this.pApp = new AppElements();
		this.pVar = new VarElements();
		this.pThis = new ThisElements();
		this.pBool = new BoolElements();
		this.pInt0 = new Int0Elements();
		this.pSkip = new SkipElements();
		this.pProject = new ProjectElements();
		this.pBObject = new BObjectElements();
		this.pCopy = new CopyElements();
		this.pWith = new WithElements();
		this.pNot = new NotElements();
		this.pIf = new IfElements();
		this.pLet = new LetElements();
		this.pFun = new FunElements();
		this.pAssign = new AssignElements();
		this.pArithOpPlus = new ArithOpPlusElements();
		this.pArithOpMinus = new ArithOpMinusElements();
		this.pArithOpTimes = new ArithOpTimesElements();
		this.pArithOpDivide = new ArithOpDivideElements();
		this.pArithOpRemainder = new ArithOpRemainderElements();
		this.pBoolOpAnd = new BoolOpAndElements();
		this.pBoolOpOr = new BoolOpOrElements();
		this.pSeq = new SeqElements();
		this.pCmpOpEqual = new CmpOpEqualElements();
		this.pCmpOpUnequal = new CmpOpUnequalElements();
		this.pCmpOpLess = new CmpOpLessElements();
		this.pEString = new EStringElements();
		this.pEBoolean = new EBooleanElements();
		this.pEInt = new EIntElements();
		this.pField = new FieldElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("boa.xtext.Boa".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//File:
	//	{File}
	//	'File'
	//	'{' ('commands' '{' commands+=TopLevelCmd ("," commands+=TopLevelCmd)* '}')?
	//	'}';
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//TopLevelCmd:
	//	Def | App | Var | This | Bool | Int0 | Skip | Project | BObject | Copy | With | Not | If | Let | Fun | Assign |
	//	ArithOpPlus | ArithOpMinus | ArithOpTimes | ArithOpDivide | ArithOpRemainder | BoolOpAnd | BoolOpOr | Seq | CmpOpEqual
	//	| CmpOpUnequal | CmpOpLess;
	public TopLevelCmdElements getTopLevelCmdAccess() {
		return pTopLevelCmd;
	}
	
	public ParserRule getTopLevelCmdRule() {
		return getTopLevelCmdAccess().getRule();
	}
	
	//Expr:
	//	App | Var | This | Bool | Int0 | Skip | Project | BObject | Copy | With | Not | If | Let | Fun | Assign | ArithOpPlus
	//	| ArithOpMinus | ArithOpTimes | ArithOpDivide | ArithOpRemainder | BoolOpAnd | BoolOpOr | Seq | CmpOpEqual |
	//	CmpOpUnequal | CmpOpLess;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//Def:
	//	'Def'
	//	name=EString
	//	'{'
	//	'expr' expr=Expr
	//	'}';
	public DefElements getDefAccess() {
		return pDef;
	}
	
	public ParserRule getDefRule() {
		return getDefAccess().getRule();
	}
	
	//App:
	//	'App'
	//	'{'
	//	'lhs' lhs=Expr
	//	'rhs' rhs=Expr
	//	'}';
	public AppElements getAppAccess() {
		return pApp;
	}
	
	public ParserRule getAppRule() {
		return getAppAccess().getRule();
	}
	
	//Var:
	//	{Var}
	//	'Var'
	//	name=EString;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//This:
	//	{This}
	//	'This';
	public ThisElements getThisAccess() {
		return pThis;
	}
	
	public ParserRule getThisRule() {
		return getThisAccess().getRule();
	}
	
	//Bool:
	//	{Bool} value?='value'?
	//	'Bool';
	public BoolElements getBoolAccess() {
		return pBool;
	}
	
	public ParserRule getBoolRule() {
		return getBoolAccess().getRule();
	}
	
	//Int0 Int:
	//	{Int}
	//	'Int'
	//	'{' ('value' value=EInt)?
	//	'}';
	public Int0Elements getInt0Access() {
		return pInt0;
	}
	
	public ParserRule getInt0Rule() {
		return getInt0Access().getRule();
	}
	
	//Skip:
	//	{Skip}
	//	'Skip';
	public SkipElements getSkipAccess() {
		return pSkip;
	}
	
	public ParserRule getSkipRule() {
		return getSkipAccess().getRule();
	}
	
	//Project:
	//	'Project'
	//	name=EString
	//	'{'
	//	'exp' exp=Expr
	//	'}';
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//BObject:
	//	{BObject}
	//	'BObject'
	//	'{' ('fields' '{' fields+=Field ("," fields+=Field)* '}')?
	//	'}';
	public BObjectElements getBObjectAccess() {
		return pBObject;
	}
	
	public ParserRule getBObjectRule() {
		return getBObjectAccess().getRule();
	}
	
	//Copy:
	//	'Copy'
	//	'{'
	//	'copy' copy=Expr
	//	'}';
	public CopyElements getCopyAccess() {
		return pCopy;
	}
	
	public ParserRule getCopyRule() {
		return getCopyAccess().getRule();
	}
	
	//With:
	//	'With'
	//	'{'
	//	'lhs' lhs=Expr
	//	'rhs' rhs=Expr
	//	'}';
	public WithElements getWithAccess() {
		return pWith;
	}
	
	public ParserRule getWithRule() {
		return getWithAccess().getRule();
	}
	
	//Not:
	//	'Not'
	//	'{'
	//	'value' value=Expr
	//	'}';
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//If:
	//	'If'
	//	'{'
	//	'cond' cond=Expr
	//	'then' thn=Expr
	//	'els' els=Expr
	//	'}';
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Let:
	//	'Let'
	//	name=EString
	//	'{'
	//	'lhs' lhs=Expr
	//	'rhs' rhs=Expr
	//	'}';
	public LetElements getLetAccess() {
		return pLet;
	}
	
	public ParserRule getLetRule() {
		return getLetAccess().getRule();
	}
	
	//Fun:
	//	'Fun'
	//	name=EString
	//	'{'
	//	'body' body=Expr
	//	'}';
	public FunElements getFunAccess() {
		return pFun;
	}
	
	public ParserRule getFunRule() {
		return getFunAccess().getRule();
	}
	
	//Assign:
	//	'Assign'
	//	name=EString
	//	'{'
	//	'lhs' lhs=Expr
	//	'rhs' rhs=Expr
	//	'}';
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}
	
	//ArithOpPlus:
	//	'ArithOpPlus'
	//	'{'
	//	'lhs' lhs=Expr
	//	'rhs' rhs=Expr
	//	'}';
	public ArithOpPlusElements getArithOpPlusAccess() {
		return pArithOpPlus;
	}
	
	public ParserRule getArithOpPlusRule() {
		return getArithOpPlusAccess().getRule();
	}
	
	//ArithOpMinus:
	//	'ArithOpMinus'
	//	'{'
	//	'lhs' lhs=Expr
	//	'rhs' rhs=Expr
	//	'}';
	public ArithOpMinusElements getArithOpMinusAccess() {
		return pArithOpMinus;
	}
	
	public ParserRule getArithOpMinusRule() {
		return getArithOpMinusAccess().getRule();
	}
	
	//ArithOpTimes:
	//	'ArithOpTimes'
	//	'{'
	//	'lhs' lhs=Expr
	//	'rhs' rhs=Expr
	//	'}';
	public ArithOpTimesElements getArithOpTimesAccess() {
		return pArithOpTimes;
	}
	
	public ParserRule getArithOpTimesRule() {
		return getArithOpTimesAccess().getRule();
	}
	
	//ArithOpDivide:
	//	'ArithOpDivide'
	//	'{'
	//	'lhs' lhs=Expr
	//	'rhs' rhs=Expr
	//	'}';
	public ArithOpDivideElements getArithOpDivideAccess() {
		return pArithOpDivide;
	}
	
	public ParserRule getArithOpDivideRule() {
		return getArithOpDivideAccess().getRule();
	}
	
	//ArithOpRemainder:
	//	'ArithOpRemainder'
	//	'{'
	//	'lhs' lhs=Expr
	//	'rhs' rhs=Expr
	//	'}';
	public ArithOpRemainderElements getArithOpRemainderAccess() {
		return pArithOpRemainder;
	}
	
	public ParserRule getArithOpRemainderRule() {
		return getArithOpRemainderAccess().getRule();
	}
	
	//BoolOpAnd:
	//	'BoolOpAnd'
	//	'{'
	//	'lhs' lhs=Expr
	//	'rhs' rhs=Expr
	//	'}';
	public BoolOpAndElements getBoolOpAndAccess() {
		return pBoolOpAnd;
	}
	
	public ParserRule getBoolOpAndRule() {
		return getBoolOpAndAccess().getRule();
	}
	
	//BoolOpOr:
	//	'BoolOpOr'
	//	'{'
	//	'lhs' lhs=Expr
	//	'rhs' rhs=Expr
	//	'}';
	public BoolOpOrElements getBoolOpOrAccess() {
		return pBoolOpOr;
	}
	
	public ParserRule getBoolOpOrRule() {
		return getBoolOpOrAccess().getRule();
	}
	
	//Seq:
	//	'Seq'
	//	'{'
	//	'lhs' lhs=Expr
	//	'rhs' rhs=Expr
	//	'}';
	public SeqElements getSeqAccess() {
		return pSeq;
	}
	
	public ParserRule getSeqRule() {
		return getSeqAccess().getRule();
	}
	
	//CmpOpEqual:
	//	'CmpOpEqual'
	//	'{'
	//	'lhs' lhs=Expr
	//	'rhs' rhs=Expr
	//	'}';
	public CmpOpEqualElements getCmpOpEqualAccess() {
		return pCmpOpEqual;
	}
	
	public ParserRule getCmpOpEqualRule() {
		return getCmpOpEqualAccess().getRule();
	}
	
	//CmpOpUnequal:
	//	'CmpOpUnequal'
	//	'{'
	//	'lhs' lhs=Expr
	//	'rhs' rhs=Expr
	//	'}';
	public CmpOpUnequalElements getCmpOpUnequalAccess() {
		return pCmpOpUnequal;
	}
	
	public ParserRule getCmpOpUnequalRule() {
		return getCmpOpUnequalAccess().getRule();
	}
	
	//CmpOpLess:
	//	'CmpOpLess'
	//	'{'
	//	'lhs' lhs=Expr
	//	'rhs' rhs=Expr
	//	'}';
	public CmpOpLessElements getCmpOpLessAccess() {
		return pCmpOpLess;
	}
	
	public ParserRule getCmpOpLessRule() {
		return getCmpOpLessAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Field:
	//	'Field'
	//	name=EString
	//	'{'
	//	'value' value=Expr
	//	'}';
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
