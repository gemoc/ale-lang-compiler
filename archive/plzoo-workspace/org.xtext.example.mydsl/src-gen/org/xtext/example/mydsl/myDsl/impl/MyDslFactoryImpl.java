/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslFactoryImpl extends EFactoryImpl implements MyDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyDslFactory init()
  {
    try
    {
      MyDslFactory theMyDslFactory = (MyDslFactory)EPackage.Registry.INSTANCE.getEFactory(MyDslPackage.eNS_URI);
      if (theMyDslFactory != null)
      {
        return theMyDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyDslPackage.FILE: return createFile();
      case MyDslPackage.TOP_LEVEL_CMD: return createTopLevelCmd();
      case MyDslPackage.EXPR: return createExpr();
      case MyDslPackage.DEF: return createDef();
      case MyDslPackage.APP: return createApp();
      case MyDslPackage.VAR: return createVar();
      case MyDslPackage.THIS: return createThis();
      case MyDslPackage.BOOL: return createBool();
      case MyDslPackage.INT: return createInt();
      case MyDslPackage.SKIP: return createSkip();
      case MyDslPackage.PROJECT: return createProject();
      case MyDslPackage.BOBJECT: return createBObject();
      case MyDslPackage.COPY: return createCopy();
      case MyDslPackage.WITH: return createWith();
      case MyDslPackage.NOT: return createNot();
      case MyDslPackage.IF: return createIf();
      case MyDslPackage.LET: return createLet();
      case MyDslPackage.FUN: return createFun();
      case MyDslPackage.ASSIGN: return createAssign();
      case MyDslPackage.ARITH_OP_PLUS: return createArithOpPlus();
      case MyDslPackage.ARITH_OP_MINUS: return createArithOpMinus();
      case MyDslPackage.ARITH_OP_TIMES: return createArithOpTimes();
      case MyDslPackage.ARITH_OP_DIVIDE: return createArithOpDivide();
      case MyDslPackage.ARITH_OP_REMAINDER: return createArithOpRemainder();
      case MyDslPackage.BOOL_OP_AND: return createBoolOpAnd();
      case MyDslPackage.BOOL_OP_OR: return createBoolOpOr();
      case MyDslPackage.SEQ: return createSeq();
      case MyDslPackage.CMP_OP_EQUAL: return createCmpOpEqual();
      case MyDslPackage.CMP_OP_UNEQUAL: return createCmpOpUnequal();
      case MyDslPackage.CMP_OP_LESS: return createCmpOpLess();
      case MyDslPackage.FIELD: return createField();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public File createFile()
  {
    FileImpl file = new FileImpl();
    return file;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TopLevelCmd createTopLevelCmd()
  {
    TopLevelCmdImpl topLevelCmd = new TopLevelCmdImpl();
    return topLevelCmd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr createExpr()
  {
    ExprImpl expr = new ExprImpl();
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Def createDef()
  {
    DefImpl def = new DefImpl();
    return def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public App createApp()
  {
    AppImpl app = new AppImpl();
    return app;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Var createVar()
  {
    VarImpl var = new VarImpl();
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public This createThis()
  {
    ThisImpl this_ = new ThisImpl();
    return this_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bool createBool()
  {
    BoolImpl bool = new BoolImpl();
    return bool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Int createInt()
  {
    IntImpl int_ = new IntImpl();
    return int_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Skip createSkip()
  {
    SkipImpl skip = new SkipImpl();
    return skip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Project createProject()
  {
    ProjectImpl project = new ProjectImpl();
    return project;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BObject createBObject()
  {
    BObjectImpl bObject = new BObjectImpl();
    return bObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Copy createCopy()
  {
    CopyImpl copy = new CopyImpl();
    return copy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public With createWith()
  {
    WithImpl with = new WithImpl();
    return with;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Not createNot()
  {
    NotImpl not = new NotImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public If createIf()
  {
    IfImpl if_ = new IfImpl();
    return if_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Let createLet()
  {
    LetImpl let = new LetImpl();
    return let;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fun createFun()
  {
    FunImpl fun = new FunImpl();
    return fun;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assign createAssign()
  {
    AssignImpl assign = new AssignImpl();
    return assign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArithOpPlus createArithOpPlus()
  {
    ArithOpPlusImpl arithOpPlus = new ArithOpPlusImpl();
    return arithOpPlus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArithOpMinus createArithOpMinus()
  {
    ArithOpMinusImpl arithOpMinus = new ArithOpMinusImpl();
    return arithOpMinus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArithOpTimes createArithOpTimes()
  {
    ArithOpTimesImpl arithOpTimes = new ArithOpTimesImpl();
    return arithOpTimes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArithOpDivide createArithOpDivide()
  {
    ArithOpDivideImpl arithOpDivide = new ArithOpDivideImpl();
    return arithOpDivide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArithOpRemainder createArithOpRemainder()
  {
    ArithOpRemainderImpl arithOpRemainder = new ArithOpRemainderImpl();
    return arithOpRemainder;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoolOpAnd createBoolOpAnd()
  {
    BoolOpAndImpl boolOpAnd = new BoolOpAndImpl();
    return boolOpAnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoolOpOr createBoolOpOr()
  {
    BoolOpOrImpl boolOpOr = new BoolOpOrImpl();
    return boolOpOr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Seq createSeq()
  {
    SeqImpl seq = new SeqImpl();
    return seq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CmpOpEqual createCmpOpEqual()
  {
    CmpOpEqualImpl cmpOpEqual = new CmpOpEqualImpl();
    return cmpOpEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CmpOpUnequal createCmpOpUnequal()
  {
    CmpOpUnequalImpl cmpOpUnequal = new CmpOpUnequalImpl();
    return cmpOpUnequal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CmpOpLess createCmpOpLess()
  {
    CmpOpLessImpl cmpOpLess = new CmpOpLessImpl();
    return cmpOpLess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Field createField()
  {
    FieldImpl field = new FieldImpl();
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslPackage getMyDslPackage()
  {
    return (MyDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyDslPackage getPackage()
  {
    return MyDslPackage.eINSTANCE;
  }

} //MyDslFactoryImpl
